# Orbit Control Proposal for CONJURE

This document outlines a proposal to make the camera orbiting controls in CONJURE more intuitive and less disorienting, based on user feedback.

### 1. Problem Statement

The current orbit system uses two discrete gestures on the right hand:
- **Thumb + Middle Finger:** Orbits the camera horizontally (around the Z-axis).
- **Thumb + Ring Finger:** Orbits the camera vertically (around the Y-axis).

While functional, this modal system can feel disconnected from the user's actions. It requires switching gestures for different axes and can lead to a sense of disorientation, as the user isn't directly manipulating the view.

### 2. Proposed Solution: Direct Manipulation Orbit

I propose we replace the two separate gestures with a single, unified "Orbit Mode" that allows for free-form rotation based on the movement of the user's hand. This is a common and highly intuitive pattern in most 3D software.

### 3. Implementation Details

**Gesture:**
- A single gesture will activate "Orbit Mode": **Right Hand, Thumb + Middle Finger**.

**Action:**
- Once this gesture is held, the system will track the *movement* of the user's hand from its starting point.
- **Horizontal Hand Movement (Left/Right):** Will directly map to orbiting the camera around the world's vertical axis (the current `rotate_y` functionality).
- **Vertical Hand Movement (Up/Down):** Will directly map to orbiting the camera around the world's horizontal axis (the current `rotate_z` functionality).

The user can move their hand in any direction (e.g., diagonally) to combine both rotations simultaneously, creating a fluid, direct 1-to-1 mapping between their hand movement and the camera's orbit.

### 4. Required Code Changes

1.  **`launcher/hand_tracker.py`:**
    - The gesture mapping will be updated. The "rotate_y" and "rotate_z" commands will be replaced by a single `"orbit"` command.
    - When the "orbit" gesture is active, the script will calculate the delta (change in `x` and `y` position) of the hand's center between frames.
    - The `fingertips.json` file will be updated to include these deltas, for example: `{"command": "orbit", "delta_x": 0.05, "delta_y": -0.02}`.

2.  **`blender/conjure_blender.py`:**
    - The operator will listen for the new `"orbit"` command.
    - When received, it will use the `delta_x` and `delta_y` values to apply a corresponding rotation to the `GestureCamera` around the appropriate axes.

### 5. Benefits of this Approach

- **Highly Intuitive:** This mirrors the "click and drag" orbit function that is standard in almost all 3D applications. It feels like directly "grabbing" the world and rotating it.
- **Reduces Cognitive Load:** The user no longer needs to remember which finger rotates which axis. They just activate the mode and move their hand.
- **Frees Up a Gesture:** The "Thumb + Ring Finger" gesture becomes available for a new action in the future (such as scaling the object or the brush size) or can be left unassigned to maintain simplicity. 