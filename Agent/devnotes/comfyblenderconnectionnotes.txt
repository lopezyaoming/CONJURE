## VIBE (Previous Project) Blender-ComfyUI Connection Analysis

This document outlines the communication architecture between the Blender script (`main.py`), the external PyQt UI (`UI.py`), and ComfyUI in the previous `VIBE` project.

### Core Components

The system is composed of three decoupled components:

1.  **Blender Instance (`main.py`):** Runs as a persistent process. It functions as a "server" that listens for commands and performs actions within the Blender environment (e.g., rendering views, importing models).
2.  **External PyQt UI (`UI.py`):** Runs as a separate, standalone Python process. It acts as the "client" or controller, providing the user interface and orchestrating the entire workflow.
3.  **ComfyUI API Scripts:** A set of Python scripts (`options_API.py`, `multiview_API.py`) that are executed as subprocesses by the UI. Their sole responsibility is to communicate with the ComfyUI HTTP server.

### Communication Mechanism: File-Based Messaging

The primary method for Inter-Process Communication (IPC) between the external UI and the Blender instance is a **file-based messaging queue**.

-   **How it works:** The UI creates simple text files (e.g., `render_request.txt`, `import_request.txt`) in a shared directory to signal a desired action.
-   **Blender's Role:** Inside Blender, a persistent timer (`bpy.app.timers`) runs continuously, polling the shared directory for these "request" files. When a file is detected, Blender performs the corresponding action (e.g., `render_multiview()`).
-   **Completion Signal:** After completing the task, Blender creates a corresponding "complete" file (e.g., `render_complete.txt`).
-   **UI's Role:** The UI, after sending a request, starts its own timer (`QTimer`) to poll for the "complete" file. Its appearance signals that the Blender task is finished and the next step in the workflow can begin.

This approach effectively decouples the two processes. The UI doesn't need to know about Blender's internal state, and Blender doesn't need to know about the UI. They only need to agree on the file names and locations.

### ComfyUI Interaction: Direct HTTP API

The system does **not** use WebSockets for ComfyUI communication. Instead, it uses a simpler, stateless HTTP request model.

1.  **Queue Prompt:** The API scripts send a `POST` request to the `http://127.0.0.1:8188/prompt` endpoint. The body of the request contains the full workflow JSON and a client ID.
2.  **Poll for History:** After queueing the prompt, the script receives a `prompt_id`. It then enters a loop, repeatedly sending `GET` requests to the `http://127.0.0.1:8188/history/{prompt_id}` endpoint.
3.  **Check for Output:** The script checks the JSON response from the history endpoint. When the prompt is finished processing, the response will contain an "outputs" section with the results (e.g., file paths to generated images or models).
4.  **Process-Based Execution:** The UI launches these ComfyUI interaction scripts in separate threads (`QThread` wrapping `subprocess.Popen`) to avoid freezing the user interface during the generation and polling process.

### High-Level Workflow Example: Generating a 3D Model

Here is the step-by-step flow for selecting a 2D concept and generating a 3D model:

1.  **UI:** User double-clicks a concept image.
2.  **UI:**
    -   Writes the selection and corresponding text prompt to disk.
    -   Launches the `multiview_API.py` script in a background thread.
3.  **`multiview_API.py`:**
    -   Loads the appropriate ComfyUI workflow JSON.
    -   Sends the workflow to the ComfyUI `/prompt` endpoint via HTTP POST.
    -   Polls the `/history` endpoint until the 3D model is generated.
    -   Saves the resulting `.glb` file to a known output directory.
4.  **UI:** When the `multiview_API.py` subprocess completes, the UI is notified.
5.  **UI:** It creates an `import_request.txt` file.
6.  **Blender:** The running timer detects `import_request.txt`, deletes it, and executes the `import_generated_mesh()` function.
7.  **Blender:** After the import is complete, it creates `import_complete.txt`.
8.  **UI:** A timer detects `import_complete.txt`, deletes it, and displays a "Success!" message to the user.

### Key Takeaways for CONJURE

-   **File-based signaling is a robust way to communicate between an external app and a running Blender instance.** It avoids complex dependencies and is easy to debug.
-   **Direct HTTP requests to the ComfyUI API are simpler than websockets for "fire-and-forget" generation tasks.**
-   **Decoupling is critical.** The UI should orchestrate the process, but the individual tasks (rendering, calling ComfyUI, importing) should be handled by specialized, independent components.
-   **Asynchronous operations are mandatory.** Both the UI and Blender must use timers or threads to perform long-running tasks without freezing. 