# --- Thoughts on Surface-Constrained Cursor Projection ---

## Problem Definition

The core issue with the current sculpting implementation is that the user's fingertips (acting as cursors) can become hidden inside the target mesh. This breaks the user's sense of connection and control, as they can no longer see where they are sculpting. The desired behavior is for the cursor to "snap" to the mesh surface when it would otherwise be occluded, similar to how Blender's native sculpting tools work.

## Proposed Solution: Camera-Based Raycasting

The most direct way to solve this is to project the fingertip cursor onto the mesh surface from the camera's point of view. This ensures that the cursor is always placed on the visible surface of the mesh, preventing it from getting lost inside.

We can use Blender's built-in raycasting functionality. The `bpy_extras.view3d_utils` submodule provides the ideal tools for this, as it handles the complexities of converting between 2D screen space and 3D world space for the current viewport.

## Implementation Steps (Algorithm)

For each frame update, and for each fingertip used for sculpting, the following logic should be applied in `conjure_blender.py`:

1.  **Get Context**:
    *   Get the current 3D viewport region and its 3D data: `region = bpy.context.region` and `rv3d = bpy.context.space_data.region_3d`. This ensures we are operating relative to what the user is actually seeing.
    *   Get the dependency graph for up-to-date scene data: `depsgraph = bpy.context.evaluated_depsgraph_get()`.

2.  **Project Fingertip to 2D**:
    *   Retrieve the fingertip's current 3D world position (`fingertip_pos_3d`) from `fingertips.json`.
    *   Convert this 3D position into a 2D screen coordinate using `bpy_extras.view3d_utils.location_3d_to_region_2d(region, rv3d, fingertip_pos_3d)`. Let's call the result `fingertip_pos_2d`.

3.  **Cast Ray from 2D Coordinate**:
    *   Get the ray's origin in 3D space from the 2D coordinate: `ray_origin = bpy_extras.view3d_utils.region_2d_to_origin_3d(region, rv3d, fingertip_pos_2d)`.
    *   Get the ray's direction vector from the 2D coordinate: `ray_direction = bpy_extras.view3d_utils.region_2d_to_vector_3d(region, rv3d, fingertip_pos_2d)`.

4.  **Perform Raycast**:
    *   Cast this new ray into the scene to find the closest intersection:
    *   `hit_result, hit_location, hit_normal, _, hit_object, _ = bpy.context.scene.ray_cast(depsgraph, ray_origin, ray_direction)`

5.  **Conditional Snapping**:
    *   **If `hit_result` is `True` and `hit_object` is the sculpt mesh**:
        *   This means the user is "pointing at" the sculpt mesh.
        *   **Snap to surface**: The new effective position for the fingertip cursor is `hit_location`.
        *   The sculpting brush should be applied here, using `hit_normal` for orientation.
        *   The visual fingertip marker should also be moved to `hit_location`.
    *   **If `hit_result` is `False` (or hits the wrong object)**:
        *   The user is pointing at empty space.
        *   The fingertip cursor should remain at its original `fingertip_pos_3d`. The existing logic applies.

## Key `bpy` Functions

-   `bpy_extras.view3d_utils.location_3d_to_region_2d()`: To project the 3D fingertip into screen space.
-   `bpy_extras.view3d_utils.region_2d_to_origin_3d()`: To get the start point of the ray (the camera/view location).
-   `bpy_extras.view3d_utils.region_2d_to_vector_3d()`: To get the direction of the ray from the screen coordinate.
-   `bpy.context.scene.ray_cast()`: The core function to find the intersection.
-   `bpy.context.evaluated_depsgraph_get()`: To ensure the raycast uses up-to-date mesh data.

## Potential Considerations

-   **Performance**: Raycasting on every frame for multiple fingertips could be performance-intensive, especially on high-poly meshes. We should ensure this logic only runs for the *active* sculpting fingertip when a sculpting gesture is active.
-   **Target Mesh Identification**: The code must be robust in identifying the correct mesh to cast against. Using `bpy.context.active_object` is a good starting point, but we need to ensure the context is correct when the script is running.
-   **User Experience**: This should feel intuitive. The transition between "free" movement in space and "snapped" movement on the surface should be seamless. The proposed logic should achieve this naturally. When the fingertip moves from behind the object to the side, `ray_cast` will start returning `False` and it will smoothly pop off the surface. 